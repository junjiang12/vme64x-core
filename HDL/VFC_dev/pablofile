---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for FIFO test
---------------------------------------------------------------------------------------
-- File           : pablofile
-- Author         : auto-generated by wbgen2 from fifotest.wb
-- Created        : Fri Jan 21 10:48:57 2011
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE fifotest.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library wbgen2;
use wbgen2.wbgen2_pkg.all;

entity wb_test_fifos is
  port (
    rst_n_i                                  : in     std_logic;
    wb_clk_i                                 : in     std_logic;
    wb_addr_i                                : in     std_logic_vector(2 downto 0);
    wb_data_i                                : in     std_logic_vector(31 downto 0);
    wb_data_o                                : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
-- FIFO write request
    ft_tsf_wr_req_i                          : in     std_logic;
-- FIFO full flag
    ft_tsf_wr_full_o                         : out    std_logic;
-- FIFO empty flag
    ft_tsf_wr_empty_o                        : out    std_logic;
-- FIFO number of used words
    ft_tsf_wr_usedw_o                        : out    std_logic_vector(7 downto 0);
    ft_tsf_val_r_i                           : in     std_logic_vector(27 downto 0);
    ft_tsf_val_f_i                           : in     std_logic_vector(3 downto 0);
    ft_tsf_pid_i                             : in     std_logic_vector(4 downto 0);
    ft_tsf_fid_i                             : in     std_logic_vector(15 downto 0);
-- FIFO read request
    ft_memacc_rd_req_i                       : in     std_logic;
-- FIFO full flag
    ft_memacc_rd_full_o                      : out    std_logic;
-- FIFO empty flag
    ft_memacc_rd_empty_o                     : out    std_logic;
-- FIFO number of used words
    ft_memacc_rd_usedw_o                     : out    std_logic_vector(4 downto 0);
    ft_memacc_ad_sel_o                       : out    std_logic;
    ft_memacc_ad_o                           : out    std_logic_vector(31 downto 0)
  );
end wb_test_fifos;

architecture syn of wb_test_fifos is

signal ft_tsf_in_int                            : std_logic_vector(52 downto 0);
signal ft_tsf_out_int                           : std_logic_vector(52 downto 0);
signal ft_tsf_rdreq_int                         : std_logic      ;
signal ft_tsf_rdreq_int_d0                      : std_logic      ;
signal ft_memacc_in_int                         : std_logic_vector(32 downto 0);
signal ft_memacc_out_int                        : std_logic_vector(32 downto 0);
signal ft_memacc_wrreq_int                      : std_logic      ;
signal ft_tsf_full_int                          : std_logic      ;
signal ft_tsf_empty_int                         : std_logic      ;
signal ft_tsf_usedw_int                         : std_logic_vector(7 downto 0);
signal ft_memacc_full_int                       : std_logic      ;
signal ft_memacc_empty_int                      : std_logic      ;
signal ft_memacc_usedw_int                      : std_logic_vector(4 downto 0);
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(2 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal bus_clock_int                            : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_data_i;
  bwsel_reg <= wb_sel_i;
  bus_clock_int <= wb_clk_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      ft_tsf_rdreq_int <= '0';
      ft_memacc_wrreq_int <= '0';
    elsif rising_edge(bus_clock_int) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          ft_memacc_wrreq_int <= '0';
          ack_in_progress <= '0';
        else
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(2 downto 0) is
          when "000" => 
            if (wb_we_i = '1') then
            else
              if (ft_tsf_rdreq_int_d0 = '0') then
                ft_tsf_rdreq_int <= not ft_tsf_rdreq_int;
              else
                rddata_reg(27 downto 0) <= ft_tsf_out_int(27 downto 0);
                rddata_reg(31 downto 28) <= ft_tsf_out_int(31 downto 28);
                ack_in_progress <= '1';
                ack_sreg(0) <= '1';
              end if;
            end if;
          when "001" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(4 downto 0) <= ft_tsf_out_int(36 downto 32);
              rddata_reg(31 downto 16) <= ft_tsf_out_int(52 downto 37);
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "010" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(16) <= ft_tsf_full_int;
              rddata_reg(17) <= ft_tsf_empty_int;
              rddata_reg(7 downto 0) <= ft_tsf_usedw_int;
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011" => 
            if (wb_we_i = '1') then
              ft_memacc_in_int(0) <= wrdata_reg(0);
            else
              rddata_reg(0) <= 'X';
              rddata_reg(1) <= 'X';
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100" => 
            if (wb_we_i = '1') then
              ft_memacc_in_int(32 downto 1) <= wrdata_reg(31 downto 0);
              ft_memacc_wrreq_int <= '1';
            else
              rddata_reg(0) <= 'X';
              rddata_reg(1) <= 'X';
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "101" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(16) <= ft_memacc_full_int;
              rddata_reg(17) <= ft_memacc_empty_int;
              rddata_reg(4 downto 0) <= ft_memacc_usedw_int;
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_data_o <= rddata_reg;
-- extra code for reg/fifo/mem: Timestamp FIFO
  ft_tsf_in_int(27 downto 0) <= ft_tsf_val_r_i;
  ft_tsf_in_int(31 downto 28) <= ft_tsf_val_f_i;
  ft_tsf_in_int(36 downto 32) <= ft_tsf_pid_i;
  ft_tsf_in_int(52 downto 37) <= ft_tsf_fid_i;
  ft_tsf_INST : wbgen2_fifo_sync
    generic map (
      g_size               => 256,
      g_width              => 53,
      g_usedw_size         => 8
    )
    port map (
      wr_req_i             => ft_tsf_wr_req_i,
      wr_full_o            => ft_tsf_wr_full_o,
      wr_empty_o           => ft_tsf_wr_empty_o,
      wr_usedw_o           => ft_tsf_wr_usedw_o,
      rd_full_o            => ft_tsf_full_int,
      rd_empty_o           => ft_tsf_empty_int,
      rd_usedw_o           => ft_tsf_usedw_int,
      rd_req_i             => ft_tsf_rdreq_int,
      clk_i                => bus_clock_int,
      wr_data_i            => ft_tsf_in_int,
      rd_data_o            => ft_tsf_out_int
    );
  
-- extra code for reg/fifo/mem: Memory Access FIFO
  ft_memacc_ad_sel_o <= ft_memacc_out_int(0);
  ft_memacc_ad_o <= ft_memacc_out_int(32 downto 1);
  ft_memacc_INST : wbgen2_fifo_sync
    generic map (
      g_size               => 32,
      g_width              => 33,
      g_usedw_size         => 5
    )
    port map (
      rd_req_i             => ft_memacc_rd_req_i,
      rd_full_o            => ft_memacc_rd_full_o,
      rd_empty_o           => ft_memacc_rd_empty_o,
      rd_usedw_o           => ft_memacc_rd_usedw_o,
      wr_full_o            => ft_memacc_full_int,
      wr_empty_o           => ft_memacc_empty_int,
      wr_usedw_o           => ft_memacc_usedw_int,
      wr_req_i             => ft_memacc_wrreq_int,
      clk_i                => bus_clock_int,
      wr_data_i            => ft_memacc_in_int,
      rd_data_o            => ft_memacc_out_int
    );
  
-- extra code for reg/fifo/mem: FIFO 'Timestamp FIFO' data output register 0
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ft_tsf_rdreq_int_d0 <= '0';
    elsif rising_edge(bus_clock_int) then
      ft_tsf_rdreq_int_d0 <= ft_tsf_rdreq_int;
    end if;
  end process;
  
  
-- extra code for reg/fifo/mem: FIFO 'Timestamp FIFO' data output register 1
-- extra code for reg/fifo/mem: FIFO 'Memory Access FIFO' data input register 0
-- extra code for reg/fifo/mem: FIFO 'Memory Access FIFO' data input register 1
  rwaddr_reg <= wb_addr_i;
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
